---
import { supabase } from "../lib/supabase";
import Layout from "../layouts/Layout.astro";
import DryerButton from "../components/DryerButton.astro";
import ActionButton from "../components/ActionButton.astro";
import ErrorDialog from "../components/ErrorDialog.astro";

// Get all registrations from db
let registeredDryers = [];
const { data, error } = await supabase.from("registrations").select("*");
if (!error) {
  //console.log("Data:");
  //console.log(data);
  // Loop through selection data and extract arrays of dryers.
  for (let registration of data) {
    if(registration.dryers !== ""){
      registeredDryers = registeredDryers.concat(JSON.parse(registration.dryers));
    }
    
  }
} else {
  console.error(error);
}

// All available dryers
const dryers = [10, 11, 12, 13, 14, 15, 16];
---

<Layout>
  <main>
    <h1>Register dryer</h1>
    <p>
      Select the dryer or dryers you are using. Enter an e-mail that will
      receive the notification and the click “Register”.
    </p>
    <h3>Available dryers</h3>
    <div id="dryerList">
      {
        dryers.map((dryer) => (
          <DryerButton
            num={dryer}
            isTaken={registeredDryers.includes(dryer) ? "isTaken" : ""}
          />
        ))
      }
    </div>
    <h3>Your e-mail</h3>
    <input type="text" name="" id="email" autocapitalize="off" />
    <ActionButton id="register">Submit</ActionButton>
  </main>
  <ErrorDialog
    id="errSelection"
    message="You have to chose at least one dryer."
  />
  <ErrorDialog
    id="errMail"
    message="The email you entered is invalid.\n (Note: addresses containing æøå in the name are invalid.)"
  />
</Layout>

<style>
  #dryerList {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }
</style>

<script>
  /*** GLOBAL VARS ***/
  const dryerButtons = document.querySelectorAll(".dryerButton");
  const email = document.getElementById("email") as HTMLInputElement;
  const register = document.getElementById("register");

  let selectedDryers = [];

  /*** EVENT LISTENERS ***/
  // Get all dryer buttons
  dryerButtons.forEach((button) => {
    button.addEventListener("click", (e) => {
      if (!button.classList.contains("isTaken")) {
        // Find the index of this button in the selectedDryers array
        let indexInSelectedDryers = selectedDryers.findIndex(
          (el) => el === parseInt(button.id)
        );
        if (indexInSelectedDryers === -1) {
          button.classList.add("isSelected");
          selectedDryers.push(parseInt(button.id));
        } else {
          button.classList.remove("isSelected");
          selectedDryers.splice(indexInSelectedDryers, 1);
        }
      }
    });
  });

  register.addEventListener("click", async () => {
    let recipient = email.value;
    try {
      validateInput(selectedDryers, recipient);

      // If input is ok, send to server.
      const url = "/api/register";
      const config = {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          recipient,
          dryers: JSON.stringify(selectedDryers)
        })
      }
      let res = await fetch(url, config);
      if(res.status === 200){
        let info = await res.json();
        console.log(info.data[0]);
        sessionStorage.setItem("registration", JSON.stringify(info.data[0]));
        location.href="/thankyou";
      }
      
    } catch (error) {
      console.error(error.message);
      if (error.message === "selection") {
        const errSelection = document.getElementById(
          "errSelection"
        ) as HTMLDialogElement;
        errSelection.showModal();
      } else if (error.message === "mail") {
        const errMail = document.getElementById("errMail") as HTMLDialogElement;
        errMail.showModal();
      } else {
        console.log("Annen feil");
      }
    }
  });

  /*** UTILITY FUNCTIONS ***/
  function validateInput(arrayOfDryers: Array<string>, emailAddress: string) {
    if (arrayOfDryers.length === 0) {
      throw new Error("selection");
    }

    // Regular expression for validating e-mails
    // Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#validation
    const re =
      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;

    if (!re.test(emailAddress)) {
      throw new Error("mail");
    }
  }
</script>

<style></style>
